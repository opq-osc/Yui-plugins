// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeMemeModel(in *jlexer.Lexer, out *KeysRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(KeysRes, 0, 4)
			} else {
				*out = KeysRes{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeMemeModel(out *jwriter.Writer, in KeysRes) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v KeysRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeMemeModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeysRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeMemeModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeysRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeMemeModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeysRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeMemeModel(l, v)
}
func easyjsonC80ae7adDecodeMemeModel1(in *jlexer.Lexer, out *KeyInfoRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Keywords = append(out.Keywords, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "params":
			easyjsonC80ae7adDecode(in, &out.Params)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeMemeModel1(out *jwriter.Writer, in KeyInfoRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Keywords {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode(out, in.Params)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyInfoRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeMemeModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyInfoRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeMemeModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyInfoRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeMemeModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyInfoRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeMemeModel1(l, v)
}
func easyjsonC80ae7adDecode(in *jlexer.Lexer, out *struct {
	MinImages    int      `json:"min_images"`
	MaxImages    int      `json:"max_images"`
	MinTexts     int      `json:"min_texts"`
	MaxTexts     int      `json:"max_texts"`
	DefaultTexts []string `json:"default_texts"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "min_images":
			out.MinImages = int(in.Int())
		case "max_images":
			out.MaxImages = int(in.Int())
		case "min_texts":
			out.MinTexts = int(in.Int())
		case "max_texts":
			out.MaxTexts = int(in.Int())
		case "default_texts":
			if in.IsNull() {
				in.Skip()
				out.DefaultTexts = nil
			} else {
				in.Delim('[')
				if out.DefaultTexts == nil {
					if !in.IsDelim(']') {
						out.DefaultTexts = make([]string, 0, 4)
					} else {
						out.DefaultTexts = []string{}
					}
				} else {
					out.DefaultTexts = (out.DefaultTexts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.DefaultTexts = append(out.DefaultTexts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode(out *jwriter.Writer, in struct {
	MinImages    int      `json:"min_images"`
	MaxImages    int      `json:"max_images"`
	MinTexts     int      `json:"min_texts"`
	MaxTexts     int      `json:"max_texts"`
	DefaultTexts []string `json:"default_texts"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"min_images\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MinImages))
	}
	{
		const prefix string = ",\"max_images\":"
		out.RawString(prefix)
		out.Int(int(in.MaxImages))
	}
	{
		const prefix string = ",\"min_texts\":"
		out.RawString(prefix)
		out.Int(int(in.MinTexts))
	}
	{
		const prefix string = ",\"max_texts\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTexts))
	}
	{
		const prefix string = ",\"default_texts\":"
		out.RawString(prefix)
		if in.DefaultTexts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.DefaultTexts {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
